---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  {
    title: "Inicio",
    label: "home",
    url: "/#home",
  },
  {
    title: "Proyectos",
    label: "projects",
    url: "/#projects",
  },
  {
    title: "Sobre mí",
    label: "about",
    url: "/#about",
  },
  {
    title: "Contacto",
    label: "contact",
    url: "mailto:kilamper@gmail.com.com",
  },
];
---

<header
  class="fixed top-0 z-10 flex items-center justify-center w-full mx-auto mt-2"
>
  <nav
    class="flex px-3 text-sm font-medium rounded-full text-gray-600 dark:text-gray-200 items-center gap-4 w-[520px] justify-between"
  >
    <button
      id="burger-menu"
      aria-label="Main menu"
      class="inline-flex items-center w-10 h-10 justify-center text-base text-gray-600 dark:text-gray-200 rounded-lg lg:hidden hover:text-blue-500 fas fa-bars"
      aria-controls="mobile-menu"
      aria-expanded="false"
    >
    </button>
    <div
      class="hidden absolute lg:relative mt-48 lg:mt-0 w-fit lg:w-full lg:flex lg:justify-between bg-gray-300 dark:bg-gray-800 lg:bg-transparent dark:lg:bg-transparent rounded-md"
      id="navbar-dropdown"
    >
      {
        navItems.map((link) => (
          <a
            class="relative block py-2 transition hover:text-blue-500 dark:hover:text-blue-400 hover:bg-gray-400 hover:dark:bg-gray-300 lg:hover:bg-transparent lg:dark:hover:bg-transparent pl-2 pr-6 lg:pr-2 rounded-md"
            aria-label={link.label}
            href={link.url}
            data-section="header"
            data-value={link.label}
          >
            {link.title}
          </a>
        ))
      }
    </div>
    <ThemeToggle />
    <div class="relative inline-block text-left w-44">
      <select
        id="language-select"
        class="block w-fit pl-3 pr-2 py-2 rounded-md bg-transparent"
      >
        <option
          value="es"
          data-language="es"
          class="bg-gray-300 dark:bg-gray-800"
        >
          Español
        </option>
        <option
          value="en"
          data-language="en"
          class="bg-gray-300 dark:bg-gray-800"
        >
          English
        </option>
        <option
          value="fr"
          data-language="fr"
          class="bg-gray-300 dark:bg-gray-800"
        >
          Français
        </option>
      </select>
    </div>
  </nav>
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-yellow-500");
            } else {
              item.classList.remove("text-yellow-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });

  const burgerMenu = document.getElementById("burger-menu");
  const navbarDropdown = document.getElementById("navbar-dropdown");

  burgerMenu.addEventListener("click", () => {
    navbarDropdown.classList.toggle("hidden");
  });

  document.addEventListener("click", (event) => {
    if (event.target !== burgerMenu && event.target !== navbarDropdown) {
      navbarDropdown.classList.add("hidden");
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    const languageSelect = document.getElementById("language-select");
    const textsToChange = document.querySelectorAll("[data-section]");

    const changeLanguage = async (language) => {
      const requestJson = await fetch(`languages/${language}.json`);
      const texts = await requestJson.json();

      for (const textToChange of textsToChange) {
        const section = textToChange.getAttribute("data-section");
        const value = textToChange.getAttribute("data-value");
        textToChange.innerHTML = texts[section][value];
      }
    };

    languageSelect.addEventListener("change", (event) => {
      const selectedLanguage = (event.target as HTMLSelectElement).value;
      changeLanguage(selectedLanguage);
    });
  });
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur dark:bg-gray-800/90 bg-white/50 ring-white/10;
    }
  }
</style>
